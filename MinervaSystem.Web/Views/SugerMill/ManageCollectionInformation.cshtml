@using MinervaSystem.Base.Models
@{
    ViewBag.Title = "Collection Information";
    @Styles.Render("~/Content/kendo.office365")
    ViewBag.HeaderContent = ViewBag.HeaderContent ?? new HeaderContentModel("Supply Order",
        new BreadcrumbModel("Supply Order", new List<LinkModel>() { new LinkModel("/SupplyOrder", "Site Action") }));

}
@Html.Partial("_HeaderContentPartial", (HeaderContentModel)ViewBag.HeaderContent)

@Styles.Render("~/Content/datatables")


<link href="~/Content/telerik/kendo.common-material.min.css" rel="stylesheet" />
<link href="~/Content/telerik/kendo.rtl.min.css" rel="stylesheet" />
<link href="~/Content/telerik/kendo.material.min.css" rel="stylesheet" />
<link href="~/Content/telerik/kendo.material.mobile.min.css" rel="stylesheet" />
<style>
    .table > thead > tr > th {
        background: #605ca8;
        color: #fff;
    }

    .form-control {
        height: auto;
    }
    /*.k-header{background:#ccc;}*/
</style>

<section class="content">
    <div class="row">
        <div class="col-xs-12">
            <div class="box">            
                @*<div class="box-header">
                    <div>
                       <label>Date: </label><label id="pTodaysDate" style="padding-left:10px"></label>
                    </div>
                </div>*@
                <form role="form">
                    <div class="box-body">
                        <div class="row">
                            <div class='col-sm-3'>
                                <div class="form-group">
                                    <label for="txtName">Farmer Name</label>
                                    <input type="text" class="form-control" id="txtName" placeholder="Farmer name">
                                </div>
                            </div>
                            <div class='col-sm-3'>
                                <div class="form-group">
                                    <label for="txtMemberKey">Member Key</label>
                                    <input type="text" class="form-control" id="txtMemberKey" placeholder="Member Key">
                                </div>
                            </div>

                            <div class='col-sm-3'>
                                <div class="form-group">
                                    <label for="txtLandArea">Land Area(Acres)</label>
                                    <input type="text" class="form-control" id="txtLandArea" placeholder="Land Area">
                                </div>
                            </div>
                            <div class='col-sm-3'>
                                <div class="form-group">
                                    <label for="txtEstimatedAmount">Estimated Yield (Ton)</label>
                                    <input type="text" class="form-control" id="txtEstimatedAmount" placeholder="Estimated Amount">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class='col-sm-3'>
                                <div class="form-group">
                                    <label for="ddlSugerMillId">Suger Mill</label>
                                    <select class="form-control" id="ddlSugerMillId"></select>
                                </div>
                            </div>
                            @*<div class='col-sm-3'>
                        <div class="form-group">
                            <label for="ddlCaneVariety">Cane Variety</label>
                            <select class="form-control" id="ddlCaneVariety"></select>
                        </div>
                    </div>*@
                            <div class='col-sm-3'>
                                <div class="form-group">
                                    <label for="ddlPlantRatoon">Plant/Ratoon</label>
                                    <select class="form-control" id="ddlPlantRatoon"></select>
                                </div>
                            </div>
                            <div class='col-sm-3'>
                                <div class="form-group">
                                    <label for="txtDateofPlanting" style="width:100%">Date of Planting</label>
                                    <input type="text" class="form-control kendo-datepicker" id="txtDateofPlanting" placeholder="Date of Planting">
                                </div>
                            </div>
                            <div class='col-sm-3'>
                                <div class="form-group">
                                    <label for="txtSupplyDate" style="width:100%">Collection Date</label>
                                    <input type="text" class="form-control kendo-datepicker" id="txtSupplyDate" placeholder="Supply Date">
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class='col-sm-3'>
                                <div class="form-group">
                                    <label for="txtName">Amount to Collect</label>
                                    <input type="text" class="form-control" id="txtAmounttoCollect" placeholder="Amount to Collect">
                                </div>
                            </div>
                            <div class='col-sm-3'>
                                <div class="form-group">
                                    <label for="txtMemberKey">Actually Collected</label>
                                    <input type="text" class="form-control" id="txtActuallyCollected" placeholder="Actually Collected">
                                </div>
                            </div>

                            <div class='col-sm-3'>
                                <div class="form-group">
                                    <label for="" style="visibility:hidden;width:100%;">Actually Collected</label>
                                    <label for="txtLandArea">Is Collected</label>
                                    <input type="checkbox" class="form-check-input" id="cbIsCollected" value="">
                                </div>
                            </div>
                        </div>
            
         
                
                    </div>
                    <!-- /.box-body -->
                    <div class="box-footer">
                        <button type="button" class="btn btn-primary" onclick="clearSupplyInformation();">Reset</button>
                        <button type="button" class="btn btn-primary" onclick="searchCollectionInformations();">Search</button>
                        <button type="button" class="btn btn-primary" id="btnTodaysOrder">Todays Order</button>
                    </div>
                    <hr style="margin:0" />
                </form>
                <div class="box-body">
                    <table id="tableSupplyInformation" class="table table-striped table-bordered  nowrap" cellspacing="0">
                        <thead>
                            <tr>
                                <th width="5%">Order Key</th>
                                <th width="5%">Member Key</th>
                                <th width="12%">Farmer</th>
                                <th width="10%">Mobile</th>
                                <th width="5%">Zone</th>
                                <th width="12%">Suger Mill</th>
                                <th width="10%">Amount to Collect</th>
                                <th width="10%">Actually Collected</th>
                                <th width="10%">Collection Date</th>
                                <th width="5%">Is Collected</th>
                                <th width="10%">Note</th>
                                <th>&nbsp;</th>
                                <th width="2%"><input type="checkbox" name="select_all" value="1" id="cbTSOSelectAll"></th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</section>

<div id="winViewItem" style="overflow:hidden;">
    <div style="margin:1px; overflow:hidden;">
        <div class="row">
            <label class="col-xs-3 col-form-label">Name:</label>
            <div class="col-sm-3">
                <p id="soFarmerName" class=""></p>
            </div>
        </div>
        <div class="row">
            <label class="col-xs-3 col-form-label">Suger Mill:</label>
            <div class="col-sm-7">
                <p id="soSugerMillName" class=""></p>
            </div>
        </div>
        <div class="row">
            <label class="col-xs-3 col-form-label">Plant/Ratoon:</label>
            <div class="col-sm-7">
                <p id="soPlantRatoon" class=""></p>
            </div>
        </div>
        <div class="row">
            <label class="col-xs-3 col-form-label">Land Area:</label>
            <div class="col-sm-7">
                <p id="soLandArea" class=""></p>
            </div>
        </div>
        <div class="row">
            <label class="col-xs-3 col-form-label">Estimated Amount:</label>
            <div class="col-sm-7">
                <p id="soTotalEstimatedAmount" class=""></p>
            </div>
        </div>
        <div class="form-group row">
            <label for="txtAmountoCollect" class="col-xs-3 col-form-label">Amount to Collect:</label>
            <div class="col-xs-3">
                <input type="text" class="form-control" id="txtAmountoCollect" placeholder="Amount to Collect">
            </div>
        </div>
        <div class="form-group row">
            <label for="txtActuallyCollected" class="col-xs-3 col-form-label">Actually Collected:</label>
            <div class="col-xs-3">
                <input type="text" class="form-control" id="txtActuallyCollected" placeholder="Actually Collected">
            </div>
        </div>
        <div class="form-group row">
            <label class="col-xs-3 col-form-label">Collection Date:</label>
            <div class="col-xs-7"><input type="text" class="form-control kendo-datetimepicker" id="txtCollectionDate" placeholder="Collection Date"></div>
        </div>
        <div class="form-group row">
            <label class="col-xs-3 col-form-label">Note:</label>
            <div class="col-xs-7"><textarea rows="4" cols="10" class="form-control" id="txtSoNote"></textarea></div>
        </div>
        <div class="form-group row">
            <label class="col-xs-3 col-form-label">Is Collected:</label>
            <div class="col-xs-7"><input type="checkbox" id="cbIsCollected" name="isCollected" value="IsCollected"></div>
        </div>
        <hr>
        <div class="modal-btn-toolbar" style="float:right;">
            <button type="button" id="btnSupplyOrderSubmit" value="Submit" class="btn btn-default" style="float:right"><i class="fa fa-check-square-o btn-save"></i> Submit</button>
            <button onclick="winViewItem.close()" class="btn btn-default" style="float:right"><i class="fa fa-ban btn-cancel"></i> Close</button>
        </div>
    </div>
</div>

<div id="winDeleteItem">
    <p>
        The supply order will be permanently deleted and cannot be recovered.<br />
        Are you sure you want to delete the item?
    </p>
    <div class="modal-btn-toolbar">
        <button onclick="supplyorder.deleteSupplyOrder()" class="btn btn-default"><i class="fa fa-close btn-delete"></i> Delete</button>
        <button onclick="winDeleteItem.close()" class="btn btn-default"><i class="fa fa-ban btn-cancel"></i> Cancel</button>
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/DataTables/Allbuttons")
    @Scripts.Render("~/bundles/kendo")

    <script type="text/javascript" language="javascript">
        var datatable;
        var winAddItem, winEditItem, winViewItem, winDeleteItem;
        var itemId = null;

        $(document).ready(function () {
            utility.addActiveLink('sCollectionSideBarMenu');
            populateDropDown();
            searchCollectionInformations();
            SetupPopupBoxes();
            utility.loadDateSorting();
            var fullDate = new Date();
            var twoDigitMonth = fullDate.getMonth() + ""; if (twoDigitMonth.length == 1) twoDigitMonth = "0" + twoDigitMonth;
            var twoDigitDate = fullDate.getDate() + ""; if (twoDigitDate.length == 1) twoDigitDate = "0" + twoDigitDate;
            var currentDate = twoDigitDate + "/" + twoDigitMonth + "/" + fullDate.getFullYear(); console.log(currentDate);
            $('#pTodaysDate').html(currentDate);
        });
        function populateDropDown() {
            getAllSugerMills();
            var optionsCaneVariety = $("#ddlCaneVariety");
            optionsCaneVariety.append($("<option />").val('').text('Select'));
            optionsCaneVariety.append($("<option />").val('0').text('ISD 1/53'));
            optionsCaneVariety.append($("<option />").val('1').text('ISD 1/54'));
            optionsCaneVariety.append($("<option />").val('2').text('ISD 16'));
            optionsCaneVariety.append($("<option />").val('3').text('ISD 17'));
            optionsCaneVariety.append($("<option />").val('4').text('ISD 18'));
            optionsCaneVariety.append($("<option />").val('5').text('ISD 19'));
            optionsCaneVariety.append($("<option />").val('6').text('ISD 20'));
            optionsCaneVariety.append($("<option />").val('7').text('ISD 25'));
            optionsCaneVariety.append($("<option />").val('8').text('ISD 28'));
            optionsCaneVariety.append($("<option />").val('9').text('LJC'));

            var optionsPlantRatoon = $("#ddlPlantRatoon");
            optionsPlantRatoon.append($("<option />").val('').text('Select'));
            optionsPlantRatoon.append($("<option />").val('0').text('Plant'));
            optionsPlantRatoon.append($("<option />").val('1').text('Ratoon'));

            var optionsPlantRatoon = $("#ddlSearchType");
            optionsPlantRatoon.append($("<option />").val('').text('All'));
            optionsPlantRatoon.append($("<option />").val('1').text('Supply Order'));

        }
        function getAllSugerMills() {
            $.ajax({
                url: '@Url.Action("GetAllSugerMillsforDdl", "SugerMill")',
                type: "Post",
                dataType: 'json',
                success: function (response) {
                    var options = $("#ddlSugerMillId");
                    options.append($("<option />").val('').text('Select'));
                    $.each(response.aaData, function (key, value) {
                        options.append($("<option />").val(this.Id).text(this.Name));
                    });
                }, error: function () { }
            });
        }
        function SetupSupplyOrdersDataTable(collectionInformationSearchObj) {
            if (datatable != null) {
                $('#tableSupplyInformation').empty();
            }
            datatable = $("#tableSupplyInformation").DataTable({
                bDestroy: true,
                scrollX: true,
                initComplete: function (settings, json) {
                    supplyOrder1.smsData = json.smsData;
                    supplyOrder1.initTodaysSupplyOrderCheckBox(datatable);
                },
                ajax: {
                    url: '@Url.Action("GetAllCollectionInformations", "SugerMill")',
                    type: "Post",
                    data: collectionInformationSearchObj
                },
                columnDefs: [
                    { targets: 0, data: "Code" },
                    { targets: 1, data: "MemberKey", orderable: true },
                    { targets: 2, data: "FarmerName", orderable: true },
                    { targets: 3, data: "MobileNo", orderable: false },
                    { targets: 4, data: "Zone", orderable: true },
                    { targets: 5, data: "SugerMillName", orderable: false },
                    { targets: 6, data: "EstimatedAmount", orderable: false },
                    { targets: 7, data: "AmounttoCollect", orderable: false },
                    { targets: 7, data: "CollectedAmount", orderable: false },
                    { targets: 8, data: "CollectionDate", render: function (data, type, row) { return FormatDateValue(ParseJsonDate(data), { "format": "dd/MM/yyyy hh:mm tt" }) } },
                    { targets: 9, data: "IsCollected", orderable: false },
                    { targets: 10, data: "Note", orderable: false },
                    { targets:11, data: null, orderable: false, class: "text-center view-control", render: function (data, type, row) { return "<a onclick='supplyorder.initSupplyOrder(this);'><i id='addHide' class='fa fa-bars'></i></a>"; } },
                    {
                         targets: 12, data: null, render: function (data, type, full, meta) {
                             return '<input type="checkbox" class="childCB" name="id[]" value="' + $('<div/>').text(data).html() + '">';
                         }
                     },],
                order: [[1, "asc"]],
                lengthChange: true,
                lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]]
            });
            new $.fn.dataTable.Buttons(datatable, [
                                                {
                                                    text: 'Send Sms',
                                                    action: function (e, dt, node, config) {
                                                        supplyOrder1.sendBulkSMSsO(datatable);
                                                    }
                                                },
                                                {
                                                     text: 'Delete',
                                                     action: function (e, dt, node, config) {
                                                         supplyOrder1.deleteBulkSO(datatable, '@Url.Action("DeleteSupplyOrder", "SugerMill")', null, function () {
                                                             searchCollectionInformations();
                                                         });
                                                     }
                                                },
                                               {
                                                   extend: 'excel',
                                                   text: '<span class="fa fa-file-excel-o"></span> Excel',
                                                   exportOptions: {
                                                       modifier: {
                                                           search: 'applied',
                                                           order: 'applied'
                                                       }
                                                   }
                                               },
                                               {
                                                   extend: 'pdf',
                                                   text: '<span class="fa fa-file-pdf-o"></span> PDF',
                                                   exportOptions: {
                                                       modifier: {
                                                           search: 'applied',
                                                           order: 'applied'
                                                       }
                                                   }
                                               },
                                                  {
                                                      extend: 'print',
                                                      text: '<span class="fa fa-print"></span> Print',
                                                      exportOptions: {
                                                          modifier: {
                                                              search: 'applied',
                                                              order: 'applied'
                                                          }
                                                      }
                                                  }
            ]);

            datatable.buttons().container().appendTo($('.col-sm-6:eq(0)', datatable.table().container()));
            datatable.buttons().container().appendTo('#tableSupplyInformation_filter');
        }

        function SetupPopupBoxes() {
            winViewItem = $("#winViewItem").kendoWindow({
                minWidth: 600,
                modal: true,
                visible: false,
                draggable: false,
                title: "Supply Order",
                open: function (obj) {
                },
                close: function () {
                    itemId = null;
                    $("#winViewItem div[id^='view-']").text("");
                }
            }).data("kendoWindow");
            winDeleteItem = $("#winDeleteItem").kendoWindow({
                minWidth: 500,
                modal: true,
                visible: false,
                draggable: false,
                title: "Delete Supply Order",
                close: function () { itemId = null; }
            }).data("kendoWindow");
        }

        var supplyorder = {
            initSupplyOrder: function (obj) {
                var tr = $(obj).closest("tr");
                var supplyOrderData = datatable.row(tr).data();
                supplyorder.clearSupplyOrderData();
                supplyorder.loadSupplyOrderPopup(supplyOrderData);
                $('#btnSupplyOrderSubmit').off('click').click(function () {
                    supplyorder.editSupplyOrder(supplyOrderData);
                });
                winViewItem.center().open();
            },
            loadSupplyOrderPopup: function (supplyOrderData) {
                $("#soFarmerName").text(supplyOrderData.FarmerName);
                $("#soSugerMillName").text(supplyOrderData.SugerMillName);
                $("#soPlantRatoon").text(supplyOrderData.PlantRatoon);
                $("#soLandArea").text(supplyOrderData.LandArea);
                $("#soTotalEstimatedAmount").text(supplyOrderData.EstimatedAmount);
                $("#txtAmountoCollect").val(supplyOrderData.AmounttoCollect);
                $("#txtActuallyCollected").val(supplyOrderData.CollectedAmount);
                $("#txtCollectionDate").val(FormatDateValue(ParseJsonDate(supplyOrderData.CollectionDate), { "format": "dd/MM/yyyy hh:mm tt" }));
                $('#cbIsCollected').prop('checked', supplyOrderData.IsCollected);
                $("#txtSoNote").val(supplyOrderData.Note);
            },
            editSupplyOrder: function (supplyOrderData) {
                var supplyOrderObj = supplyorder.getSupplyOrderData(supplyOrderData);
                if (supplyorder.validateSupplyOrder(supplyOrderObj)) {
                    $.ajax({
                        url: '@Url.Action("UpdateSupplyOrder", "SugerMill")',
                        type: "Post",
                        //dataType: 'json',
                        data: supplyOrderObj,
                        success: function (response) {
                            winViewItem.close();
                            supplyorder.sendSMS();
                        }, error: function (response) {

                        }
                    });
                } else alert("Please Enter Required Information.");
            },
            validateSupplyOrder: function (supplyOrderData) {
                var msg = "";
                if (!supplyOrderData.EstimatedAmount || !supplyOrderData.CollectionDate) return false;
                else return true;
            },
            getSupplyOrderData: function (supplyOrderData) {
                var supplyOrderObj = new Object();
                supplyOrderObj.Id = supplyOrderData.Id;
                supplyOrderObj.SugerMillId = supplyOrderData.SugerMillId;
                supplyOrderObj.SupplyInformationId = supplyOrderData.Id;
                supplyOrderObj.MobileNo = supplyOrderData.MobileNo;
                var collectedAmount = parseFloat($('#txtAmountoCollect').val());
                supplyOrderObj.EstimatedAmount = isNaN(collectedAmount) ? null : collectedAmount;
                var actuallyCollected = parseFloat($('#txtActuallyCollected').val());
                supplyOrderObj.CollectedAmount = isNaN(actuallyCollected) ? null : actuallyCollected;
                supplyOrderObj.CollectionDate = !$("#txtCollectionDate").val() ? null : $("#txtCollectionDate").val();
                supplyOrderObj.Note = !$("#txtSoNote").val() ? null : $("#txtSoNote").val();
                supplyOrderObj.IsCollected = $('#cbIsCollected').prop('checked');
                return supplyOrderObj;
            },
            sendSMS: function (response) {
                var smsRequest = supplyorder.getSMSrequest(response);
                $.ajax({
                    url: response.url,
                    type: "POST",
                    data: JSON.stringify(supplyOrderObj),
                    headers: { "Authorization": response.authorization },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        winViewItem.close();
                        alert("You will get a quick SMS");
                    }, error: function (response) {
                        console.log(response);
                    }
                });
            },
            getSMSrequest: function (response) {
                var smsRequest = new Object();
                smsRequest.from = response.from;
                smsRequest.to = response.mobileNo;
                smsRequest.text = response.responseMsg;
                return smsRequest;
            },
            clearSupplyOrderData: function () {
                $("#soFarmerName").text('');
                $("#soSugerMillName").text('');
                $("#soPlantRatoon").text('');
                $("#soLandArea").text('');
                $("#soTotalEstimatedAmount").text('');
                $("#txtAmountoCollect").val('');
                $("#txtActuallyCollected").val('');
                $("#txtCollectionDate").val('');
                $('#cbIsCollected').prop('checked', false);
                $("#txtSoNote").val('');
            },
            deleteSupplyOrder: function () {
                if (itemId != null) {
                    $.ajax({
                        url: '@Url.Action("DeleteSupplyOrder", "SugerMill")', type: "Post",
                        data: { supplyOrderId: itemId },
                        async: false, cache: false,
                        success: function (response) {
                            winDeleteItem.close();
                            datatable.ajax.reload();
                            return true;
                        }, error: function () { return false; }
                    });
                }
            },
            sentBulkSmsNotification: function () {

            }
        }
        function clearSupplyInformation() {
            $("#txtMemberKey").val('');
            $("#txtName").val('');
            $("#txtLandArea").val('');
            $("#txtEstimatedAmount").val('');
            $("#ddlSugerMillId").val('');
            $("#ddlCaneVariety").val('');
            $("#ddlPlantRatoon").val('');
            $("#ddlSearchType").val('');
            $("#txtDateofPlanting").val('');

            $("#txtSupplyDate").val('');
            $("#txtAmounttoCollect").val('');
            $("#txtActuallyCollected").val('');
            $("#cbIsCollected").prop('checked',false);
            
        }
        function searchCollectionInformations() {
            var supplyInformationSearchObj = new Object();
            supplyInformationSearchObj.MemberKey = !$("#txtMemberKey").val() ? null : $("#txtMemberKey").val();
            supplyInformationSearchObj.Name = !$("#txtName").val() ? null : $("#txtName").val();
            var landArea = parseFloat($('#txtLandArea').val());
            supplyInformationSearchObj.LandArea = isNaN(landArea) ? null : landArea;
            var estimatedAmount = parseFloat($('#txtEstimatedAmount').val());
            supplyInformationSearchObj.EstimatedAmount = isNaN(estimatedAmount) ? null : estimatedAmount;
            var sugerMillId = parseInt($("#ddlSugerMillId").val());
            supplyInformationSearchObj.SugerMillId = isNaN(sugerMillId) ? null : sugerMillId;
            var caneVariety = parseInt($("#ddlCaneVariety").val());
            supplyInformationSearchObj.CaneVariety = isNaN(caneVariety) ? null : caneVariety;
            var plantRatoon = parseInt($("#ddlPlantRatoon").val());
            supplyInformationSearchObj.PlantRatoon = isNaN(plantRatoon) ? null : plantRatoon;
            supplyInformationSearchObj.DateofPlanting = !$("#txtDateofPlanting").val() ? null : $("#txtDateofPlanting").val();
            supplyInformationSearchObj.CollectionDate = !$("#txtSupplyDate").val() ? null : $("#txtSupplyDate").val();

            var amounttoCollect = parseFloat($('#txtAmounttoCollect').val());
            supplyInformationSearchObj.AmounttoCollect = isNaN(amounttoCollect) ? null : amounttoCollect;
            var collectedAmount = parseFloat($('#txtActuallyCollected').val());
            supplyInformationSearchObj.CollectedAmount = isNaN(collectedAmount) ? null : collectedAmount;
            supplyInformationSearchObj.IsCollected = $('#cbIsCollected').prop('checked');
            if (supplyInformationSearchObj) {
                SetupSupplyOrdersDataTable(supplyInformationSearchObj);
            }
        }
    </script>
}
